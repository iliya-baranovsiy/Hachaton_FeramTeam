from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from keybords import *
from aiogram.types.input_file import FSInputFile
from servesies.ai import *
import asyncio
from servesies.db import db
from form_vac import form

router = Router()
user_dict = {}


@router.message(CommandStart())
async def start_mes(mes: Message):
    count = 0
    id = mes.chat.id
    user_dict[id] = []
    user_dict[id].append(count)
    buttons = InlineKeyboardMarkup(inline_keyboard=menu)
    await mes.answer(
        '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ üëã\n\n–Ø –ø–æ–º–æ–≥–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± IT –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ –≤—ã–¥–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∏–ºüìä\n–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ä—ã–Ω–∫–µ IT —Ç—Ä—É–¥–∞ üñ•Ô∏è\n\n–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n1)–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º –∏ –∫—É—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º üìà\n\n2)–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ç–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º üìâ\n\n3)–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò ü§ñ\n\n–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É —Å —Ç–æ–±–æ–π, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –¥–µ–π—Å—Ç–≤–∏—é üë®‚ÄçüöÄ')
    await asyncio.sleep(3)
    await mes.answer('–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá', reply_markup=buttons)


@router.callback_query(F.data == 'menu')
async def menu_disp(callback: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=buttons)


@router.callback_query(F.data == "common_stat")
async def common_display(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=common_stat_but)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)


@router.callback_query(F.data == 'exp')
async def send_exp(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(photo=types.FSInputFile("experience_distribution.png"),
                                    caption='–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥–∞—Ä–º–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã ü§ì')
    await call.message.answer('–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'format')
async def send_type(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(photo=FSInputFile('work_formats_distribution.png'),
                                    caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã üßê')
    await call.message.answer('–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'AI')
async def ai_answer(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    try:
        await call.message.edit_text('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç... ü§ñ')
        ans = await AiAnalyse()
        await call.message.answer(ans)
        await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    except:
        await call.message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ üîÑ', reply_markup=buttons)


@router.callback_query(F.data == 'filters')
async def get_filters(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=filters_kb)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)


@router.callback_query(F.data == 'actual')
async def actual(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(photo=FSInputFile('pic/gisto_count.png'),
                                    caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ø–ü')
    await asyncio.sleep(2)
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'req_prog')
async def choice_lang(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=req_lang)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ø–ü  üëá', reply_markup=buttons)


@router.callback_query(F.data == 'python')
async def python_req(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(FSInputFile('pic/python_reqs.png'), caption='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ Python')
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'jav')
async def python_req(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(FSInputFile('pic/java_reqs.png'), caption='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ Java')
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'js')
async def python_req(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(FSInputFile('pic/js_reqs.png'), caption='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ JS')
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'cs')
async def python_req(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(FSInputFile('pic/cs_reqs.png'), caption='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ C#')
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'detail')
async def python_req(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await call.message.answer_photo(FSInputFile('pic/exp_.png'), caption='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –æ–ø—ã—Ç–∞ –∏ –Ø–ü')
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ üëá', reply_markup=buttons)
    await call.message.delete()


@router.callback_query(F.data == 'search')
async def search_func(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=search_list)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –æ–ø—ã—Ç üëá', reply_markup=buttons)


@router.callback_query(F.data == 'exp_one-three')
async def one_three_exp(call: CallbackQuery):
    buttons_menu = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    try:
        id = call.message.chat.id
        count = user_dict[id][0]
        data = await db.select_info_exp()
        mes = form(data[count][0], data[count][1], data[count][2], data[count][3], data[count][4], data[count][5])
        buttons = InlineKeyboardMarkup(inline_keyboard=inc_button)
        await call.message.answer(mes, reply_markup=buttons)
        user_dict[id][0] = count + 1
    except:
        await call.message.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø—É—Å—Ç, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é', reply_markup=buttons_menu)


@router.callback_query(F.data == 'next')
async def next_vac(call: CallbackQuery):
    buttons_menu = InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    try:
        id = call.message.chat.id
        count = user_dict[id][0]
        data = await db.select_info_exp()
        mes = form(data[count][0], data[count][1], data[count][2], data[count][3], data[count][4], data[count][5])
        buttons = InlineKeyboardMarkup(inline_keyboard=inc_button)
        await call.message.answer(mes, reply_markup=buttons)
        user_dict[id][0] = count + 1
    except:
        await call.message.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø—É—Å—Ç, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é', reply_markup=buttons_menu)





@router.message()
async def random_mes(mes: Message):
    buttons = InlineKeyboardMarkup(inline_keyboard=menu)
    await mes.answer('–ü–µ—Ä–µ–π–¥–∏ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëá', reply_markup=buttons)
